import { useState } from "react";
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  PDFViewer,
  pdf,
  Font,
} from "@react-pdf/renderer";
import ReactMarkdown from "react-markdown";
import { renderToString } from "react-dom/server";

interface PdfExportButtonProps {
  contentRef: React.RefObject<HTMLDivElement | null>;
  fileName?: string;
}

// Create styles for PDF
const styles = StyleSheet.create({
  page: {
    padding: 40,
    paddingBottom: 60,
    fontSize: 12,
    fontFamily: "Times-Roman",
    color: "#000000",
  },
  section: {
    marginBottom: 10,
  },
  heading1: {
    fontSize: 24,
    marginBottom: 16,
    fontFamily: "Times-Bold",
  },
  heading2: {
    fontSize: 20,
    marginBottom: 14,
    fontFamily: "Times-Bold",
  },
  heading3: {
    fontSize: 16,
    marginBottom: 12,
    fontFamily: "Times-Bold",
  },
  paragraph: {
    marginBottom: 10,
    lineHeight: 1.5,
  },
  code: {
    fontFamily: "Courier",
    backgroundColor: "#f5f5f5",
    padding: 8,
    marginVertical: 8,
    fontSize: 10,
  },
  list: {
    marginLeft: 20,
    marginBottom: 10,
  },
  listItem: {
    marginBottom: 5,
  },
  footer: {
    position: "absolute",
    bottom: 20,
    left: 40,
    right: 40,
    borderTopWidth: 1,
    borderTopColor: "#cccccc",
    paddingTop: 10,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  footerText: {
    fontSize: 8,
    color: "#666666",
  },
  pageNumber: {
    fontSize: 8,
    color: "#666666",
  },
});

// Footer component
const Footer = () => {
  const currentDate = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  return (
    <View style={styles.footer} fixed>
      <Text style={styles.footerText}>
        Generated by NoteMaster AI • {currentDate}
      </Text>
      <Text
        style={styles.pageNumber}
        render={({ pageNumber, totalPages }) =>
          `Page ${pageNumber} of ${totalPages}`
        }
      />
    </View>
  );
};

// PDF Document component
const PdfDocument = ({ content }: { content: string }) => {
  const processContent = (htmlContent: string) => {
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = htmlContent;
    return processNode(tempDiv);
  };

  const processNode = (node: Node): any[] => {
    const results: any[] = [];

    node.childNodes.forEach((child) => {
      if (child.nodeType === Node.TEXT_NODE) {
        const text = child.textContent?.trim();
        if (text) {
          results.push(
            <Text key={Math.random()} style={styles.paragraph}>
              {text}
            </Text>
          );
        }
      } else if (child.nodeType === Node.ELEMENT_NODE) {
        const element = child as Element;

        switch (element.tagName.toLowerCase()) {
          case "h1":
            results.push(
              <Text key={Math.random()} style={styles.heading1}>
                {element.textContent}
              </Text>
            );
            break;
          case "h2":
            results.push(
              <Text key={Math.random()} style={styles.heading2}>
                {element.textContent}
              </Text>
            );
            break;
          case "h3":
            results.push(
              <Text key={Math.random()} style={styles.heading3}>
                {element.textContent}
              </Text>
            );
            break;
          case "p":
            results.push(
              <Text key={Math.random()} style={styles.paragraph}>
                {element.textContent}
              </Text>
            );
            break;
          case "pre":
          case "code":
            results.push(
              <Text key={Math.random()} style={styles.code}>
                {element.textContent}
              </Text>
            );
            break;
          case "ul":
          case "ol":
            const items = Array.from(element.children).map((li, index) => (
              <Text key={index} style={styles.listItem}>
                • {li.textContent}
              </Text>
            ));
            results.push(
              <View key={Math.random()} style={styles.list}>
                {items}
              </View>
            );
            break;
          default:
            results.push(...processNode(child));
        }
      }
    });

    return results;
  };

  const contentElements = processContent(content);

  // Split content into pages (roughly 3000 characters per page)
  const pagesContent: any[][] = [[]];
  let currentPage = 0;
  let currentPageSize = 0;

  contentElements.forEach((element) => {
    const elementSize = element.props.children?.length || 0;

    if (currentPageSize + elementSize > 3000 && currentPageSize > 0) {
      currentPage++;
      pagesContent[currentPage] = [];
      currentPageSize = 0;
    }

    pagesContent[currentPage].push(element);
    currentPageSize += elementSize;
  });

  return (
    <Document>
      {pagesContent.map((pageContent, index) => (
        <Page key={index} size="A4" style={styles.page}>
          <View>{pageContent}</View>
          <Footer />
        </Page>
      ))}
    </Document>
  );
};

export default function PdfExportButton({
  contentRef,
  fileName = "document",
}: PdfExportButtonProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const handleExport = async () => {
    try {
      if (!contentRef.current) return;
      setIsGenerating(true);

      // Get the content HTML
      const content = contentRef.current.innerHTML;

      // Generate PDF blob
      const blob = await pdf(<PdfDocument content={content} />).toBlob();

      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `${fileName}.pdf`;

      // Trigger download
      document.body.appendChild(link);
      link.click();

      // Cleanup
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error generating PDF:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <button
      onClick={handleExport}
      disabled={isGenerating}
      className={`inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 ${
        isGenerating ? "opacity-75 cursor-not-allowed" : ""
      }`}
    >
      {isGenerating ? (
        <>
          <svg
            className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          Generating PDF...
        </>
      ) : (
        <>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5 mr-2"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
              clipRule="evenodd"
            />
          </svg>
          Export to PDF
        </>
      )}
    </button>
  );
}
