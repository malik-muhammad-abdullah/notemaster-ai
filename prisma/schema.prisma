// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?          @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  files         FileUpload[]
  conversations ChatConversation[]
  tasks         Task[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FileUpload {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileType  String
  fileSize  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("file_uploads")
}

model ChatConversation {
  id        String        @id @default(cuid())
  title     String
  type      String        @default("GENERAL") // Types: GENERAL, CODING_ASSISTANT, REAL_TIME_TEXT_TUTORING
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("chat_conversations")
}

model ChatMessage {
  id             String           @id @default(cuid())
  content        String
  role           String // 'user' or 'assistant'
  conversationId String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())

  @@map("chat_messages")
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  status      String         @default("PENDING") // PENDING, COMPLETED, CANCELLED
  priority    String         @default("MEDIUM") // LOW, MEDIUM, HIGH
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders   TaskReminder[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("tasks")
}

model TaskReminder {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  sendAt    DateTime
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_reminders")
}
